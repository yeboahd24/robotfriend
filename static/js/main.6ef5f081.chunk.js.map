{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","constants.js","App.js","actions.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onsRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","payload","error","dispatch","event","text","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobot","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ef5f081.chunk.js","sourcesContent":["import React from 'react';\nimport \"tachyons\"\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","\nimport React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from \"react\";\nimport \"tachyons\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","\nimport React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// import logo from './logo.svg';\nimport \"./App.css\";\nimport React, { Component } from \"react\";\nimport CardList from \"./CardList\";\nimport SearchBox from \"./SearchBox\";\nimport \"tachyons\";\nimport Scroll from \"./Scroll\";\nimport {connect} from 'react-redux';\nimport {setSearchField, requestRobots} from './actions';\n\n\n// Reducers\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.payload,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onsRequestRobots: ()=> dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onsRequestRobots();\n  }\n\n  // onSearchChange = (event) => {\n  //   this.setState({ searchfield: event.target.value })\n  // }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\nREQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING } from \"./constants\";\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\n// HIGH ORDER FUNCTION\nexport const requestRobots =() => (dispatch)=>{\n    dispatch({type:REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\n}","import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_PENDING } from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\n\nconst initialStateRobot = {\n    isPending:false,\n    error: '',\n    payload: []\n}\n\nexport const requestRobots = (state=initialStateRobot, action={}) => {\n    switch (action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {'isPending':true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {'payload':action.payload, 'isPending':false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {'error': action.payload, isPending:false})\n        default:\n            return state\n    }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport {createLogger} from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n// import Hello from './Hello';\n// import Card from './Card';\n// import CardList from './CardList';\n// import {robots} from './robots';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}